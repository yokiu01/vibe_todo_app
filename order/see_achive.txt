핵심은 **'Do' 데이터와 'See' 데이터를 명확하게 분리하여 시각적으로 보여주는 것**입니다.



-----

### 🏛️ 아카이브 회고 기능 구현 (Non-AI 버전)

이 기능은 이전에 논의한 대로 `ArchiveScreen`의 **'회고 및 요약'** 탭에 위치합니다.

#### 1\. 🖥️ UI/UX 구성: 데이터의 명확한 분리와 제시

`ReviewScreen`은 사용자가 선택한 기간의 데이터를 '무엇을 했는가(Do)'와 '무엇을 느꼈는가(See)'로 나누어 보여줍니다.

  * **① 기간 설정 필터 (Date Range Filter):**

      * 화면 최상단에 위치하며 `이번 주`, `지난주`, `이번 달` 등을 선택할 수 있는 칩(Chip) 형태의 UI를 제공합니다.

  * **② 정량적 성과: 무엇을 해냈나요? (The "Do")**

      * **핵심 지표 카드 (Key Metrics Card):**
          * **총 완료한 일:** 선택된 기간 동안 완료한 총 Task 개수를 보여줍니다.
          * **가장 집중한 프로젝트:** 완료된 Task가 가장 많이 속한 프로젝트 이름을 보여줍니다.
      * **프로젝트별 성과 차트 (Chart View):**
          * `fl_chart` 같은 라이브러리를 사용하여, 각 프로젝트별로 몇 개의 Task를 완료했는지 보여주는 **막대그래프**를 시각적으로 제공합니다.

  * **③ 정성적 기록: 무엇을 느끼고 배웠나요? (The "See")**

      * **회고록 타임라인 (Diary Timeline):**
          * AI 요약 대신, 선택된 기간에 작성된 **모든 PDS 'See' 기록을 날짜순으로 보여주는 스크롤 가능한 리스트**를 제공합니다.
          * 각 항목은 `날짜`와 `회고 내용`으로 구성된 카드 형태로, 사용자가 자신의 생각 흐름을 따라갈 수 있게 합니다.

#### 2\. ⚙️ 데이터 로직 및 상태 관리 (`ReviewProvider`)

`ReviewProvider`는 UI에 필요한 데이터를 Notion으로부터 가져와 가공하는 역할을 담당합니다.

1.  **상태(State) 정의:**

      * 선택된 기간 (`startDate`, `endDate`)
      * 조회된 Task 목록 (`List<NotionTask>`)
      * 조회된 PDS Diary 목록 (`List<PDSDiary>`)
      * 로딩 및 에러 상태 (`isLoading`, `hasError`)

2.  **핵심 로직 (`fetchReviewData` 함수):**

      * **a. 완료된 Task 조회 ("Do"):**
          * Notion API를 호출하여 `Tasks` 데이터베이스를 쿼리합니다.
          * **필터 조건:**
              * `Status` 속성이 'Done'인 항목
              * `Completed Date` 속성이 선택된 기간(`startDate` \~ `endDate`) 내에 있는 항목
      * **b. 회고 기록 조회 ("See"):**
          * Notion API를 호출하여 `PDS Diary` 데이터베이스를 쿼리합니다.
          * **필터 조건:**
              * `Date` 속성이 선택된 기간(`startDate` \~ `endDate`) 내에 있는 항목
      * **c. 데이터 가공:**
          * 조회된 Task 목록을 바탕으로 '총 완료 개수', '프로젝트별 개수' 등 핵심 지표를 계산합니다.
      * **d. 상태 업데이트:** 계산된 데이터와 조회된 목록으로 Provider의 상태를 업데이트하여 UI가 리빌드되도록 합니다.

#### 3\. 💻 Flutter/Dart 구현 예시 코드

**`ReviewProvider`의 데이터 로딩 함수 (개념 코드):**

```dart
class ReviewProvider with ChangeNotifier {
  DateTime _startDate;
  DateTime _endDate;
  List<NotionTask> _completedTasks = [];
  List<PDSDiary> _diaryEntries = [];
  bool _isLoading = false;

  // ... (getters)

  Future<void> fetchReviewData(DateTime start, DateTime end) async {
    _startDate = start;
    _endDate = end;
    _isLoading = true;
    notifyListeners();

    // NotionService를 통해 API 호출 (실제 구현 필요)
    _completedTasks = await notionService.getTasks(
      status: 'Done', 
      dateRange: [_startDate, _endDate]
    );
    _diaryEntries = await notionService.getDiaries(
      dateRange: [_startDate, _endDate]
    );

    _isLoading = false;
    notifyListeners();
  }
}
```

**`ReviewScreen`의 위젯 구조 (개념 코드):**

```dart
class ReviewScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final reviewProvider = context.watch<ReviewProvider>();

    return Scaffold(
      body: Column(
        children: [
          // ① 기간 설정 필터 UI
          DateFilterChips(), 

          // ② 'Do' 섹션: 정량적 성과
          Text('무엇을 해냈나요? (Do)', style: TextStyle(fontSize: 20)),
          KeyMetricsCard(tasks: reviewProvider.completedTasks),
          ProjectBarChart(tasks: reviewProvider.completedTasks),

          Divider(),

          // ③ 'See' 섹션: 정성적 기록
          Text('무엇을 느끼고 배웠나요? (See)', style: TextStyle(fontSize: 20)),
          Expanded(
            child: ListView.builder(
              itemCount: reviewProvider.diaryEntries.length,
              itemBuilder: (context, index) {
                // 각 다이어리 항목을 보여주는 카드 위젯
                return DiaryEntryCard(entry: reviewProvider.diaryEntries[index]);
              },
            ),
          ),
        ],
      ),
    );
  }
}
```

-----

### 📊 핵심 구현 사항 (AI 제외 버전)

| 구분 | 내용 |
| :--- | :--- |
| **UI/UX** | **데이터의 명확한 분리:** 'Do'와 'See' 섹션을 시각적으로 구분하여 사용자가 쉽게 인지하도록 함. |
| | **시각화:** 텍스트 기반의 지표와 함께 차트를 활용하여 성과를 직관적으로 전달. |
| | **사용자 직접 탐색:** AI 요약 대신, 사용자가 직접 자신의 'See' 기록을 스크롤하며 인사이트를 얻도록 유도. |
| **데이터 로직** | **두 개의 독립된 API 호출:** `Tasks` DB와 `PDS Diary` DB에서 각각 날짜를 기준으로 데이터를 필터링하여 가져옴. |
| | **클라이언트 측 가공:** 가져온 데이터를 Provider 내에서 UI에 필요한 형태로 (예: 차트 데이터 모델) 가공. |

이처럼 AI 없이도 사용자의 데이터를 효과적으로 보여줌으로써 'See(회고)'의 가치를 충분히 전달할 수 있습니다.

데이터를 시각화할 차트(`fl_chart`)의 상세 구현이나, 날짜 필터 UI의 상태 관리 로직에 대해 더 자세히 알아볼까요?